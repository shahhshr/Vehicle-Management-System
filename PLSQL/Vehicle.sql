--Vehicle 

--Create Vehicles Table
CREATE TABLE Vehicles (
    VehicleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    Make VARCHAR2(50) NOT NULL,
    Model VARCHAR2(50) NOT NULL,
    Year NUMBER NOT NULL,
    VIN VARCHAR2(17) UNIQUE NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

-- Procedures

-- Insert_Vehicle procedure
CREATE OR REPLACE PROCEDURE Insert_Vehicle(
    p_CustomerID IN NUMBER,
    p_Make IN VARCHAR2,
    p_Model IN VARCHAR2,
    p_Year IN NUMBER,
    p_VIN IN VARCHAR2
) AS
BEGIN
    -- Check if customer exists first
    IF NOT Customer_Exists(p_CustomerID) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Customer does not exist');
    END IF;
    
    INSERT INTO Vehicles (CustomerID, Make, Model, Year, VIN)
    VALUES (p_CustomerID, p_Make, p_Model, p_Year, p_VIN);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END Insert_Vehicle;
/

-- Update_Vehicle procedure
CREATE OR REPLACE PROCEDURE Update_Vehicle(
    p_VehicleID IN NUMBER,
    p_CustomerID IN NUMBER,
    p_Make IN VARCHAR2,
    p_Model IN VARCHAR2,
    p_Year IN NUMBER,
    p_VIN IN VARCHAR2
) AS
BEGIN
    -- Check if customer exists first
    IF NOT Customer_Exists(p_CustomerID) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Customer does not exist');
    END IF;
    
    UPDATE Vehicles
    SET CustomerID = p_CustomerID,
        Make = p_Make,
        Model = p_Model,
        Year = p_Year,
        VIN = p_VIN
    WHERE VehicleID = p_VehicleID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END Update_Vehicle;
/

-- Delete_Vehicle procedure
CREATE OR REPLACE PROCEDURE Delete_Vehicle(
    p_VehicleID IN NUMBER
) AS
BEGIN
    DELETE FROM Vehicles WHERE VehicleID = p_VehicleID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END Delete_Vehicle;
/

-- Get_Vehicle procedure with REF CURSOR
CREATE OR REPLACE PROCEDURE Get_Vehicle(
    p_VehicleID IN NUMBER,
    p_Result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Result FOR
    SELECT v.*, c.FirstName, c.LastName
    FROM Vehicles v
    JOIN Customers c ON v.CustomerID = c.CustomerID
    WHERE v.VehicleID = p_VehicleID;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END Get_Vehicle;
/

-- Get_Vehicles_By_Customer procedure
CREATE OR REPLACE PROCEDURE Get_Vehicles_By_Customer(
    p_CustomerID IN NUMBER,
    p_Result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Result FOR
    SELECT * FROM Vehicles WHERE CustomerID = p_CustomerID;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END Get_Vehicles_By_Customer;
/
--Function

-- Function to check if vehicle exists
CREATE OR REPLACE FUNCTION Vehicle_Exists(
    p_VehicleID IN NUMBER
) RETURN BOOLEAN AS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM Vehicles
    WHERE VehicleID = p_VehicleID;
    
    RETURN (v_count > 0);
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END Vehicle_Exists;
/
--Cursor 
-- Cursor to search vehicles with customer info
CREATE OR REPLACE PROCEDURE Search_Vehicles(
    p_SearchText IN VARCHAR2,
    p_Result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Result FOR
    SELECT v.*, c.FirstName, c.LastName
    FROM Vehicles v
    JOIN Customers c ON v.CustomerID = c.CustomerID
    WHERE UPPER(v.Make) LIKE '%' || UPPER(p_SearchText) || '%'
       OR UPPER(v.Model) LIKE '%' || UPPER(p_SearchText) || '%'
       OR UPPER(v.VIN) LIKE '%' || UPPER(p_SearchText) || '%'
       OR UPPER(c.FirstName) LIKE '%' || UPPER(p_SearchText) || '%'
       OR UPPER(c.LastName) LIKE '%' || UPPER(p_SearchText) || '%';
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END Search_Vehicles;
/