--Create Tables

--Create Customers Table
CREATE TABLE Customers (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Phone VARCHAR2(15),
    Address VARCHAR2(255)
);
--Create Vehicles Table
CREATE TABLE Vehicles (
    VehicleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    Make VARCHAR2(50) NOT NULL,
    Model VARCHAR2(50) NOT NULL,
    Year NUMBER NOT NULL,
    VIN VARCHAR2(17) UNIQUE NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

SET SERVEROUTPUT ON;

--Customer CRUD Operations

--(A) Insert a Customer
CREATE OR REPLACE PROCEDURE Insert_Customer(
    p_FirstName IN VARCHAR2,
    p_LastName IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_Phone IN VARCHAR2,
    p_Address IN VARCHAR2
) AS
BEGIN
    INSERT INTO Customers (FirstName, LastName, Email, Phone, Address)
    VALUES (p_FirstName, p_LastName, p_Email, p_Phone, p_Address);
    COMMIT;
END;
/
--For Execution:

BEGIN
    Insert_Customer('Poorva', 'Patel', 'poorva@gmail.com', '123-456-7890', '123 Elm St');
    Insert_Customer('Shachi', 'Patel', 'shachi@gmail.com', '987-654-3210', '456 Oak St');
END;
/

SELECT * FROM Customers;

--(B) Read Customer
CREATE OR REPLACE PROCEDURE Get_Customer(
    p_CustomerID IN NUMBER
) AS
    v_FirstName Customers.FirstName%TYPE;
    v_LastName Customers.LastName%TYPE;
    v_Email Customers.Email%TYPE;
    v_Phone Customers.Phone%TYPE;
    v_Address Customers.Address%TYPE;
BEGIN
    SELECT FirstName, LastName, Email, Phone, Address
    INTO v_FirstName, v_LastName, v_Email, v_Phone, v_Address
    FROM Customers
    WHERE CustomerID = p_CustomerID;

    DBMS_OUTPUT.PUT_LINE('Customer: ' || v_FirstName || ' ' || v_LastName);
    DBMS_OUTPUT.PUT_LINE('Email: ' || v_Email);
    DBMS_OUTPUT.PUT_LINE('Phone: ' || v_Phone);
    DBMS_OUTPUT.PUT_LINE('Address: ' || v_Address);
END;
/

--For Execution:

BEGIN
    Get_Customer(1);
END;
/

--(C) Update Customer
CREATE OR REPLACE PROCEDURE Update_Customer(
    p_CustomerID IN NUMBER,
    p_FirstName IN VARCHAR2,
    p_LastName IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_Phone IN VARCHAR2,
    p_Address IN VARCHAR2
) AS
BEGIN
    UPDATE Customers
    SET FirstName = p_FirstName,
        LastName = p_LastName,
        Email = p_Email,
        Phone = p_Phone,
        Address = p_Address
    WHERE CustomerID = p_CustomerID;

    COMMIT;
END;
/

--For Execution:

BEGIN
    Update_Customer(1, 'Poorva', 'Patel', 'poorvapatel@gmail.com', '111-222-3333', '789 Maple St');
END;
/

SELECT * FROM Customers;

--(D) Delete Customer
CREATE OR REPLACE PROCEDURE Delete_Customer(
    p_CustomerID IN NUMBER
) AS
BEGIN
    DELETE FROM Customers WHERE CustomerID = p_CustomerID;
    COMMIT;
END;
/

--For Execution:

BEGIN
    Delete_Customer(2);
END;
/

SELECT * FROM Customers;


--Vehicle CRUD Operations

--(A) Insert a Vehicle
CREATE OR REPLACE PROCEDURE Insert_Vehicle(
    p_CustomerID IN NUMBER,
    p_Make IN VARCHAR2,
    p_Model IN VARCHAR2,
    p_Year IN NUMBER,
    p_VIN IN VARCHAR2
) AS
BEGIN
    INSERT INTO Vehicles (CustomerID, Make, Model, Year, VIN)
    VALUES (p_CustomerID, p_Make, p_Model, p_Year, p_VIN);
    COMMIT;
END;
/

--For Execution:

BEGIN
    Insert_Vehicle(1, 'Toyota', 'Camry', 2022, 'JTDBE32K123456789');
    Insert_Vehicle(1, 'Honda', 'Civic', 2021, '2HGFB2F58CH123456');
    Insert_Vehicle(2, 'Ford', 'Mustang', 2023, '1FA6P8CF9L5109876');
END;
/

SELECT * FROM Vehicles;


--(B) Read Vehicle
CREATE OR REPLACE PROCEDURE Get_Vehicle(
    p_VehicleID IN NUMBER
) AS
    v_CustomerID Vehicles.CustomerID%TYPE;
    v_Make Vehicles.Make%TYPE;
    v_Model Vehicles.Model%TYPE;
    v_Year Vehicles.Year%TYPE;
    v_VIN Vehicles.VIN%TYPE;
BEGIN
    SELECT CustomerID, Make, Model, Year, VIN
    INTO v_CustomerID, v_Make, v_Model, v_Year, v_VIN
    FROM Vehicles
    WHERE VehicleID = p_VehicleID;

    DBMS_OUTPUT.PUT_LINE('Vehicle: ' || v_Make || ' ' || v_Model || ' (' || v_Year || ')');
    DBMS_OUTPUT.PUT_LINE('VIN: ' || v_VIN);
    DBMS_OUTPUT.PUT_LINE('Belongs to Customer ID: ' || v_CustomerID);
END;
/

--For Execution:

BEGIN
    Get_Vehicle(1);
END;
/

--(C) Update Vehicle
CREATE OR REPLACE PROCEDURE Update_Vehicle(
    p_VehicleID IN NUMBER,
    p_Make IN VARCHAR2,
    p_Model IN VARCHAR2,
    p_Year IN NUMBER,
    p_VIN IN VARCHAR2
) AS
BEGIN
    UPDATE Vehicles
    SET Make = p_Make,
        Model = p_Model,
        Year = p_Year,
        VIN = p_VIN
    WHERE VehicleID = p_VehicleID;

    COMMIT;
END;
/

--For Execution:

BEGIN
    Update_Vehicle(1, 'Tesla', 'Model 3', 2023, '5YJ3E1EA7KF317456');
END;
/

SELECT * FROM Vehicles;


--(D) Delete Vehicle
CREATE OR REPLACE PROCEDURE Delete_Vehicle(
    p_VehicleID IN NUMBER
) AS
BEGIN
    DELETE FROM Vehicles WHERE VehicleID = p_VehicleID;
    COMMIT;
END;
/

--For Execution:

BEGIN
    Delete_Vehicle(2);
END;
/

SELECT * FROM Vehicles;


--PL/SQL Procedure: Fetch Customer & All Vehicles(Use a CURSOR to Fetch Multiple Vehicles)

CREATE OR REPLACE PROCEDURE Get_Customer_All_Vehicles(
    p_CustomerID IN NUMBER
) AS
    -- Define Composite Data Type for Customer
    TYPE CustomerRecord IS RECORD (
        CustomerID Customers.CustomerID%TYPE,
        FullName VARCHAR2(101),
        Email Customers.Email%TYPE,
        Phone Customers.Phone%TYPE
    );

    -- Define Composite Data Type for Vehicle
    TYPE VehicleRecord IS RECORD (
        VehicleID Vehicles.VehicleID%TYPE,
        Make Vehicles.Make%TYPE,
        Model Vehicles.Model%TYPE,
        Year Vehicles.Year%TYPE,
        VIN Vehicles.VIN%TYPE
    );

    -- Declare Variables
    v_Customer CustomerRecord;
    v_Vehicle VehicleRecord;

    -- Declare Cursor for Multiple Vehicles
    CURSOR Vehicle_Cursor IS
        SELECT VehicleID, Make, Model, Year, VIN
        FROM Vehicles
        WHERE CustomerID = p_CustomerID;
BEGIN
    -- Fetch Customer Details
    SELECT CustomerID, FirstName || ' ' || LastName, Email, Phone
    INTO v_Customer
    FROM Customers
    WHERE CustomerID = p_CustomerID;

    -- Display Customer Details
    DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_Customer.CustomerID);
    DBMS_OUTPUT.PUT_LINE('Name: ' || v_Customer.FullName);
    DBMS_OUTPUT.PUT_LINE('Email: ' || v_Customer.Email);
    DBMS_OUTPUT.PUT_LINE('Phone: ' || v_Customer.Phone);
    DBMS_OUTPUT.PUT_LINE('Vehicles:');

    -- Open Cursor and Fetch Each Vehicle
    FOR v_Vehicle IN Vehicle_Cursor LOOP
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Vehicle ID: ' || v_Vehicle.VehicleID);
        DBMS_OUTPUT.PUT_LINE('Make: ' || v_Vehicle.Make);
        DBMS_OUTPUT.PUT_LINE('Model: ' || v_Vehicle.Model);
        DBMS_OUTPUT.PUT_LINE('Year: ' || v_Vehicle.Year);
        DBMS_OUTPUT.PUT_LINE('VIN: ' || v_Vehicle.VIN);
    END LOOP;
END;
/
